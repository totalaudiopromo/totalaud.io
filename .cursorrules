# TotalAud.io Cursor Rules

## ⚠️ MANDATORY FIRST STEP

**At the start of EVERY conversation, Claude Code MUST:**

1. Run `git status` to check current state
2. Run `git fetch origin` to check for remote changes
3. If behind remote: Ask "You're behind by X commits. Pull latest changes?"
4. If on main: Ask "Create a new feature branch for this work?"
5. THEN proceed with user's request

**User just says:** "Ready to work" or "I want to add [feature]" and Claude handles git automatically.

---

## Project Context

This is a monorepo for TotalAud.io - an AI-powered music marketing platform.

## Architecture

- **Monorepo:** pnpm workspaces + Turborepo
- **Apps:** aud-web (Next.js), totalaudiopromo (to be migrated)
- **Packages:** Core business logic, shared UI components
- **Database:** Supabase (PostgreSQL + Auth)
- **AI:** OpenAI & Anthropic via abstraction layer

## Code Style

- **TypeScript:** Strict mode enabled
- **Formatting:** Prettier (100 char width, single quotes, no semicolons)
- **Naming:** camelCase for variables/functions, PascalCase for components/types
- **Imports:** Use workspace aliases (`@total-audio/core-*`)
- **Linting:** ESLint v9 with strict rules (no `any` types, no console.log)

## Commit Message Rules (MANDATORY)

- **UK spelling ONLY:** optimise, colour, behaviour, organise
- **NO emojis:** Keep commit messages professional
- **Format:** `type(scope): subject` (lowercase, no period)
- **Types:** feat, fix, docs, refactor, test, chore
- **Subject:** Imperative mood ("add" not "added")
- **Body:** Explain what and why, not how
- **Footer:** `Co-Authored-By: Claude <noreply@anthropic.com>`

Example:
```
feat(api): add user authentication with JWT

Implemented JWT-based authentication for API routes.
Users can now register and login securely.

Co-Authored-By: Claude <noreply@anthropic.com>
```

## Key Principles

1. **Skills-Based Architecture:** All AI functionality goes through YAML-defined skills
2. **Shared Core:** Business logic in `packages/core/*`, not in apps
3. **Type Safety:** Generate types from Supabase schema, validate with Zod
4. **Cost Tracking:** Log all AI usage (tokens, cost) to database

## Common Commands

```bash
pnpm dev              # Start development servers
pnpm db:start         # Start Supabase
pnpm db:types         # Generate types from schema
pnpm typecheck        # Check types across monorepo
```

## When Adding New Features

1. **Skills:** Create YAML in `skills/<category>/`, implement in skills-engine
2. **API Routes:** Add to `apps/aud-web/src/app/api/`
3. **Database:** Create migration in `supabase/migrations/`
4. **Shared Logic:** Add to appropriate `packages/core/*` package

## Brand Voice

- Casual, music industry insider
- No bullshit, direct communication
- Millennial/Gen X focused (25-45)
- Examples: "tools that actually work", "stop wasting time"

## Colors

- Audio Intel: Electric Blue (#3b82f6)
- Playlist Pulse: Neon Green (#22c55e)
- Release Radar: Orange (#f59e0b)
- Base: Black & White with color accents

